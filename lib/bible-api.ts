// Servi√ßo para acessar a API b√≠blica
const API_URL = "https://demoapp.top1soft.com.br/api/Bible"

// Fun√ß√£o auxiliar para fazer requisi√ß√µes autenticadas
async function fetchWithAuth(url: string) {
  const token = typeof window !== "undefined" ? localStorage.getItem("authToken") : null

  if (!token) {
    throw new Error("Token de autentica√ß√£o n√£o encontrado")
  }

  console.log("üåê Fazendo requisi√ß√£o para:", url)
  console.log("üîë Token:", token ? `${token.substring(0, 20)}...` : "N√£o encontrado")

  const response = await fetch(url, {
    headers: {
      Authorization: `Bearer ${token}`,
      Accept: "*/*",
    },
  })

  console.log("üì° Resposta da API:", response.status, response.statusText)

  if (!response.ok) {
    const errorText = await response.text()
    console.error("‚ùå Erro na API:", response.status, response.statusText, errorText)
    throw new Error(`Erro na API: ${response.status} ${response.statusText}`)
  }

  const data = await response.json()
  console.log("‚úÖ Dados recebidos da API:", data)
  return data
}

// API para vers√µes da B√≠blia
export async function getBibleVersions() {
  return fetchWithAuth(`${API_URL}/versions`)
}

// API para livros de uma vers√£o
export async function getBooksFromVersion(versionId: number) {
  return fetchWithAuth(`${API_URL}/versions/${versionId}/books`)
}

// API para cap√≠tulos de um livro
export async function getChaptersFromBook(bookId: number) {
  return fetchWithAuth(`${API_URL}/books/${bookId}/chapters`)
}

// API para vers√≠culos de um cap√≠tulo - CORRIGIDA
export async function getVersesFromChapter(chapterId: number) {
  return fetchWithAuth(`${API_URL}/chapters/${chapterId}/verses`)
}

// API para um vers√≠culo espec√≠fico - NOVA IMPLEMENTA√á√ÉO
export async function getSpecificVerse(chapterId: number, verseNumber: number) {
  console.log("üîç Buscando vers√≠culo espec√≠fico...")
  console.log("   chapterId:", chapterId)
  console.log("   verseNumber:", verseNumber)

  // Primeiro, buscar todos os vers√≠culos do cap√≠tulo
  const verses = await getVersesFromChapter(chapterId)
  console.log("üìö Vers√≠culos do cap√≠tulo recebidos:", verses)

  // Depois, filtrar pelo n√∫mero do vers√≠culo
  if (Array.isArray(verses)) {
    const specificVerse = verses.find(
      (verse) =>
        verse.verseNumber === verseNumber ||
        verse.verse === verseNumber ||
        verse.number === verseNumber ||
        verse.id === verseNumber,
    )

    if (specificVerse) {
      console.log("‚úÖ Vers√≠culo espec√≠fico encontrado:", specificVerse)
      return specificVerse
    } else {
      console.log("‚ùå Vers√≠culo n√£o encontrado no array. Vers√≠culos dispon√≠veis:")
      verses.forEach((v, index) => {
        console.log(`   [${index}]:`, v)
      })
      throw new Error(`Vers√≠culo ${verseNumber} n√£o encontrado no cap√≠tulo ${chapterId}`)
    }
  } else {
    console.log("‚ùå Resposta da API n√£o √© um array:", verses)
    throw new Error("Formato de resposta inesperado da API")
  }
}

// Fun√ß√£o auxiliar para buscar informa√ß√µes completas de uma leitura b√≠blica
export async function getBibleReading(versionId: number, bookId: number, chapterId: number, verseId?: number) {
  console.log("üìñ Buscando leitura b√≠blica completa...")
  console.log("   versionId:", versionId)
  console.log("   bookId:", bookId)
  console.log("   chapterId:", chapterId)
  console.log("   verseId:", verseId)

  try {
    // 1. Buscar informa√ß√µes da vers√£o (opcional - para obter nome da vers√£o)
    let versionName = `Vers√£o ${versionId}`
    try {
      const versions = await getBibleVersions()
      const version = versions.find((v: any) => v.id === versionId)
      if (version) {
        versionName = version.name || version.title || versionName
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è N√£o foi poss√≠vel obter nome da vers√£o:", error)
    }

    // 2. Buscar informa√ß√µes do livro (opcional - para obter nome do livro)
    let bookName = `Livro ${bookId}`
    try {
      const books = await getBooksFromVersion(versionId)
      const book = books.find((b: any) => b.id === bookId)
      if (book) {
        bookName = book.name || book.title || bookName
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è N√£o foi poss√≠vel obter nome do livro:", error)
    }

    // 3. Buscar o conte√∫do (vers√≠culo espec√≠fico ou cap√≠tulo completo)
    let content
    const isFullChapter = !verseId

    if (verseId) {
      // Buscar vers√≠culo espec√≠fico
      content = await getSpecificVerse(chapterId, verseId)
    } else {
      // Buscar cap√≠tulo completo
      content = await getVersesFromChapter(chapterId)
    }

    return {
      versionId,
      versionName,
      bookId,
      bookName,
      chapterId,
      verseId,
      isFullChapter,
      content,
      success: true,
    }
  } catch (error) {
    console.error("‚ùå Erro ao buscar leitura b√≠blica:", error)
    return {
      versionId,
      versionName: `Vers√£o ${versionId}`,
      bookId,
      bookName: `Livro ${bookId}`,
      chapterId,
      verseId,
      isFullChapter: !verseId,
      content: null,
      error: (error as Error).message,
      success: false,
    }
  }
}
