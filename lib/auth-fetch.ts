// Fun√ß√£o utilit√°ria para fazer requisi√ß√µes autenticadas padronizadas
// ‚úÖ GARANTIA TOTAL de "Bearer " (com espa√ßo) em TODAS as requisi√ß√µes
// ‚úÖ LOGOUT AUTOM√ÅTICO em caso de 401

interface AuthFetchOptions extends RequestInit {
  skipAuth?: boolean
  skipAutoLogout?: boolean // Para casos espec√≠ficos onde n√£o queremos logout autom√°tico
}

/**
 * Obter token do localStorage
 */
function getAuthToken(): string | null {
  if (typeof window === "undefined") return null
  return localStorage.getItem("authToken")
}

/**
 * Limpar dados de autentica√ß√£o e redirecionar
 */
function clearAuthData(): void {
  if (typeof window !== "undefined") {
    console.log("üö™ Fazendo logout autom√°tico devido a erro 401")

    // Limpar dados do localStorage
    localStorage.removeItem("authToken")
    localStorage.removeItem("userRole")
    localStorage.removeItem("user")

    // Mostrar toast de erro se dispon√≠vel
    try {
      const event = new CustomEvent("auth-error", {
        detail: { message: "Sess√£o expirada. Fa√ßa login novamente." },
      })
      window.dispatchEvent(event)
    } catch (e) {
      console.log("Toast n√£o dispon√≠vel")
    }

    // Redirecionar para login
    window.location.href = "/login"
  }
}

/**
 * ‚úÖ Fun√ß√£o padronizada para fazer requisi√ß√µes autenticadas
 * GARANTIA ABSOLUTA de "Bearer " (com espa√ßo) antes do token
 * LOGOUT AUTOM√ÅTICO em caso de 401
 */
export async function authFetch(url: string, options: AuthFetchOptions = {}): Promise<Response> {
  const { skipAuth = false, skipAutoLogout = false, ...fetchOptions } = options

  const headers: Record<string, string> = {
    "Content-Type": "application/json",
    Accept: "text/plain", // Conforme a API espera
    ...((fetchOptions.headers as Record<string, string>) || {}),
  }

  // Adicionar token de autentica√ß√£o se n√£o for skipAuth
  if (!skipAuth) {
    const token = getAuthToken()
    if (!token) {
      console.error("‚ùå Token de autentica√ß√£o n√£o encontrado")
      if (!skipAutoLogout) {
        clearAuthData()
      }
      throw new Error("Token de autentica√ß√£o n√£o encontrado. Fa√ßa login novamente.")
    }

    // ‚úÖ CR√çTICO: SEMPRE usar "Bearer " (com espa√ßo) antes do token
    headers.Authorization = `Bearer ${token}`

    // ‚úÖ Verifica√ß√µes de seguran√ßa
    console.log(`üîë Authorization header: "${headers.Authorization.substring(0, 20)}..."`)
    console.log(`üîë Token length: ${token.length}`)

    // ‚úÖ Verifica√ß√£o adicional para garantir que est√° correto
    if (!headers.Authorization.startsWith("Bearer ")) {
      console.error("‚ùå ERRO CR√çTICO: Authorization header n√£o come√ßa com 'Bearer '")
      throw new Error("Erro na formata√ß√£o do token de autoriza√ß√£o")
    }
  }

  console.log(`üîó AuthFetch para: ${url}`)

  try {
    const response = await fetch(url, {
      ...fetchOptions,
      headers,
    })

    console.log(`üìä Status da resposta: ${response.status}`)

    // ‚úÖ TRATAMENTO AUTOM√ÅTICO DE 401 - LOGOUT FOR√áADO
    if (response.status === 401) {
      console.error("‚ùå Erro 401 - Token inv√°lido ou expirado")
      console.error("üö™ Iniciando logout autom√°tico...")

      if (!skipAuth && !skipAutoLogout) {
        // Fazer logout autom√°tico
        clearAuthData()
        // A fun√ß√£o clearAuthData j√° redireciona, mas vamos garantir
        return response // Retorna a resposta para n√£o quebrar o fluxo
      }
    }

    return response
  } catch (error) {
    console.error("‚ùå Erro na requisi√ß√£o:", error)
    throw error
  }
}

/**
 * ‚úÖ Fazer requisi√ß√£o JSON autenticada
 * Tratamento melhorado para diferentes tipos de resposta
 * LOGOUT AUTOM√ÅTICO em caso de 401
 */
export async function authFetchJson(url: string, options: AuthFetchOptions = {}): Promise<any> {
  try {
    const response = await authFetch(url, options)

    console.log(`üìä Status final: ${response.status}`)

    // Se for 401 e j√° foi tratado pelo authFetch, n√£o precisa fazer nada mais
    if (response.status === 401) {
      throw new Error("Sess√£o expirada. Redirecionando para login...")
    }

    // Se n√£o for bem-sucedido, tentar obter mais detalhes do erro
    if (!response.ok) {
      let errorText = ""
      try {
        const contentType = response.headers.get("content-type")
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json()
          errorText = JSON.stringify(errorData)
          console.error("‚ùå Erro JSON:", errorData)
        } else {
          errorText = await response.text()
          console.error("‚ùå Erro texto:", errorText)
        }
      } catch (e) {
        errorText = "Erro desconhecido"
        console.error("‚ùå Erro ao processar resposta de erro:", e)
      }

      throw new Error(`Erro na API: ${response.status} - ${errorText}`)
    }

    // Se for 204 (No Content), retorna null
    if (response.status === 204) {
      console.log("‚úÖ Resposta 204 - No Content")
      return null
    }

    // Verificar o tipo de conte√∫do da resposta
    const contentType = response.headers.get("content-type")
    console.log(`üìÑ Content-Type: ${contentType}`)

    // Se a resposta for text/plain (como a API retorna para algumas opera√ß√µes)
    if (contentType && contentType.includes("text/plain")) {
      const text = await response.text()
      console.log("üìÑ Resposta text/plain:", text)

      // Tentar fazer parse como JSON se poss√≠vel
      try {
        const parsed = JSON.parse(text)
        console.log("‚úÖ Text/plain parseado como JSON:", parsed)
        return parsed
      } catch {
        // Se n√£o conseguir fazer parse, retornar como texto
        console.log("‚úÖ Retornando como texto puro")
        return text
      }
    }

    // Se for JSON, fazer parse
    if (contentType && contentType.includes("application/json")) {
      const data = await response.json()
      console.log("‚úÖ Resposta JSON:", data)
      return data
    }

    // Fallback para texto
    const text = await response.text()
    console.log("‚úÖ Fallback para texto:", text)
    return text
  } catch (error) {
    console.error("‚ùå Erro na requisi√ß√£o authFetchJson:", error)
    throw error
  }
}

// Exporta√ß√£o padr√£o para compatibilidade
export default authFetch
