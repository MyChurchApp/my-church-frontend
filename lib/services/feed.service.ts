import type { FeedResponse, CreateFeedPostRequest, UpdateFeedPostRequest } from "@/lib/types/feed.types"
import { httpClient } from "@/lib/utils/http.utils"

export class FeedService {
  private static readonly BASE_URL = "https://demoapp.top1soft.com.br/api/Feed"

  static async getFeed(pageNumber = 1, pageSize = 10): Promise<FeedResponse> {
    try {
      console.log(`üåê Buscando feed - P√°gina: ${pageNumber}, Tamanho: ${pageSize}`)

      const url = `${this.BASE_URL}?pageNumber=${pageNumber}&pageSize=${pageSize}`
      const response = await httpClient.get<FeedResponse>(url)

      console.log("‚úÖ Feed carregado com sucesso:", response)
      return response
    } catch (error) {
      console.error("‚ùå Erro ao buscar feed:", error)

      // Retornar dados vazios em caso de erro para n√£o quebrar a interface
      return {
        items: [],
        pageNumber: pageNumber,
        pageSize: pageSize,
        totalCount: 0,
        totalPages: 0,
      }
    }
  }

  static async createPost(request: CreateFeedPostRequest): Promise<number> {
    try {
      console.log("üåê Criando post:", request)

      const payload = {
        content: request.content,
      }

      const response = await httpClient.post<number>(this.BASE_URL, payload)

      console.log("‚úÖ Post criado com sucesso. ID:", response)
      return response
    } catch (error) {
      console.error("‚ùå Erro ao criar post:", error)
      throw new Error("Falha ao criar publica√ß√£o. Verifique sua conex√£o e tente novamente.")
    }
  }

  static async updatePost(postId: number, request: UpdateFeedPostRequest): Promise<void> {
    try {
      console.log(`üåê Atualizando post ${postId}:`, request)

      const payload = {
        content: request.content,
      }

      await httpClient.put(`${this.BASE_URL}/${postId}`, payload)

      console.log("‚úÖ Post atualizado com sucesso")
    } catch (error) {
      console.error("‚ùå Erro ao atualizar post:", error)
      throw new Error("Falha ao atualizar publica√ß√£o. Verifique sua conex√£o e tente novamente.")
    }
  }

  static async deletePost(postId: number): Promise<void> {
    try {
      console.log(`üåê Deletando post ${postId}`)

      await httpClient.delete(`${this.BASE_URL}/${postId}`)

      console.log("‚úÖ Post deletado com sucesso")
    } catch (error) {
      console.error("‚ùå Erro ao deletar post:", error)
      throw new Error("Falha ao deletar publica√ß√£o. Verifique sua conex√£o e tente novamente.")
    }
  }

  // M√©todo para testar conectividade
  static async testConnection(): Promise<boolean> {
    try {
      await this.getFeed(1, 1)
      return true
    } catch (error) {
      console.error("‚ùå Teste de conex√£o falhou:", error)
      return false
    }
  }
}
